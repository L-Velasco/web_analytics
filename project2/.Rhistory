head(Glass)
glass %>%
select(-Type) %>%
mutate_all(function(x) sqrt(x)) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales='free') +
geom_histogram(aes(y=..density..), colour='black', fill='white') +
geom_density(alpha=0.2, fill='#cf322e')
ggplot(glass, aes(x=Type)) +
geom_bar(colour='black', fill='white')
custom_ggpair <- function(data, mapping, ...) {
ggplot(data = data, mapping = mapping) +
geom_point(alpha=0.3, size=0.5) +
geom_smooth(method=loess, color="red", size=0.5, ...)
}
ggpairs(glass[,1:9], diag='blank', upper='blank',
lower=list(continuous=custom_ggpair))
corrplot::corrplot(cor(glass[,1:9]), type='upper', method='number',
order='hclust')
plot(ClustOfVar::hclustvar(glass[,1:9]))
glass %>%
gather(-Type, key='variable', value='value') %>%
ggplot(aes(x=Type, y=value, fill=variable)) +
geom_bar(stat='identity', position=position_dodge())
boxplot(glass[, 1:9])
sapply(glass[,1:9], e1071::skewness)
data('Soybean'); soybean <- Soybean
colnames(soybean)[1] <- 'class_'
head(soybean)
nearZeroVar(soybean)
library(caret)
nearZeroVar(soybean)
colnames(soybean)[ nearZeroVar(soybean) ]
unique(soybean[,nearZeroVar(soybean)])
head(soybean)
0.98 + 0.97 - (0.98)(0.97)
0.98 + 0.97 - (0.98*0.97)
0.99 + 0.99 - (0.99 * 0.99)
0.95 * 0.9994 * 0.9999
1-0.9493351
install.packages('markovchain')
library(markovchain)
g_0 <- 100; s_0 <- 100
g <- c(g_0)
s <- c(s_0)
for (i in 2:100) {
g_n <- 0.25 * g[i-1] + 0.07 * s[i-1]
s_n <- 0.75 * g[i-1] + 0.93 * s[i-1]
g <- append(g_n, g)
s <- append(s_n, s)
}
s
g
g <- c(g_0)
s <- c(s_0)
i = 2
0.25 * g[i-1] + 0.07 * s[i-1]
0.75 * g[i-1] + 0.93 * s[i-1]
g <- append(g_n, g)
g
append(g, g_n)
g_0 <- 100; s_0 <- 100
g <- c(g_0)
s <- c(s_0)
for (i in 2:100) {
g_n <- 0.25 * g[i-1] + 0.07 * s[i-1]
s_n <- 0.75 * g[i-1] + 0.93 * s[i-1]
g <- append(g, g_n)
s <- append(s, s_n)
}
g
s
g_0 <- 100; s_0 <- 100
g <- c(g_0)
s <- c(s_0)
for (i in 2:16) {
g_n <- 0.25 * g[i-1] + 0.07 * s[i-1]
s_n <- 0.75 * g[i-1] + 0.93 * s[i-1]
g <- append(g, g_n)
s <- append(s, s_n)
}
plot(1:16, g, col='red')
abline(1:16, s, col='blue')
plot(1:16, g, type='o', col='red')
abline(1:16, s, col='blue')
plot(1:16, s, type='o', col='red')
abline(1:16, g, type='o', col='blue')
plot(1:16, s, type='o', col='red', xlim=c(0, 200))
plot(1:16, s, type='o', col='red', ylim=c(0, 200))
plot(1:16, s, type='o', col='red')
plot(1:16, s, type='o', col='red', ylim=c(0, 200))
abline(1:16, g, type='o', col='blue')
plot(1:16, s, type='o', col='red', ylim=c(0, 200))
g
abline(1:16, g, type='o', col='blue')
plot(1:16, s, type='o', col='red', ylim=c(0, 200))
abline(1:16, g,  col='blue')
plot(1:16, s, type='o', col='red', ylim=c(0, 200))
abline(1:16, g,  col='blue')
g
s
g
plot(1:16, s, type='o', col='red', ylim=c(0, 200))
plot(lines(1:16, g, col='blue'))
plot(1:16, s, type='o', col='red', ylim=c(0, 200))
lines(1:16, g, col='blue')
plot(1:16, s, type='o', col='red', ylim=c(0, 200))
lines(1:16, g, type='o', col='blue')
plot(1:16, s, type='o', col='red', ylim=c(0, 200))
lines(1:16, g, type='o', col='blue')
text(locator(), labels = c("S_n", "G_n)"))
y <- c(132, 126, 141, 415, 150, 155, 160, 165, 170, 175, 180,
185, 190, 195, 201, 206, 212, 218, 223, 229, 234)
x <- c(60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
74, 76, 77, 78, 79, 80)
y <- c(132, 126, 141, 415, 150, 155, 160, 165, 170, 175, 180,
185, 190, 195, 201, 206, 212, 218, 223, 229, 234)
y
x <- c(60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
74, 76, 77, 78, 79, 80)
x
cbind(x,y0
)
cbind(x,y)
y <- c(132, 136, 141, 145, 150, 155, 160, 165, 170, 175, 180,
185, 190, 195, 201, 206, 212, 218, 223, 229, 234)
x <- c(60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
74, 75, 76, 77, 78, 79, 80)
cbind(x,y)
plot(x,y)
m <- length(x)
( m * sum(x) * y - sum(x) * sum(y) ) / (m * sum(x^2) - (sum(x)^2))
lm(y ~ x)
( m * sum(x) * y - sum(x) * sum(y) ) / (m * sum(x^2) - (sum(x)^2))
sum(( m * sum(x) * y - sum(x) * sum(y) ) / (m * sum(x^2) - (sum(x)^2)))
m * sum(x) * y - sum(x) * sum(y)
* sum(x^2) - (sum(x)^2)
sum(x^2) - (sum(x)^2)
m * sum(x*y) - sum(x) * sum(y)
( m * sum(x*y) - sum(x) * sum(y) ) / (m * sum(x^2) - (sum(x)^2))
m <- length(x)
( a <- ( m * sum(x*y) - sum(x) * sum(y) ) / ( m * sum(x^2) - (sum(x)^2) ) )
m * sum(x^2) - (sum(x))^2
sum(x^2) * sum(y) - sum(x*y) * sum(x)
( sum(x^2) * sum(y) - sum(x*y) * sum(x) ) / ( m * sum(x^2) - (sum(x))^2 )
( a <- ( m * sum(x*y) - sum(x) * sum(y) ) / ( m * sum(x^2) - (sum(x)^2) ) )
( b <-
( sum(x^2) * sum(y) - sum(x*y) * sum(x) ) / ( m * sum(x^2) - (sum(x))^2 ) )
( sum(x^2) * sum(y) - sum(x*y) * sum(x) ) / ( m * sum(x^2) - (sum(x))^2 )
m <- length(x)
a <- ( m * sum(x*y) - sum(x) * sum(y) ) / ( m * sum(x^2) - (sum(x)^2) )
b <-
(sum(x^2) * sum(y) - sum(x*y) * sum(x) ) / ( m * sum(x^2) - (sum(x))^2)
c(a,b)
m <- length(x)
a <- ( m * sum(x*y) - sum(x) * sum(y) ) / ( m * sum(x^2) - (sum(x)^2) )
b <-
(sum(x^2) * sum(y) - sum(x*y) * sum(x) ) / ( m * sum(x^2) - (sum(x))^2)
print(c(a, b))
j <- lm(y ~ x)
SSE(j)
j
summary)j
summary9j
summary(j)
sse <- sum((y - (a*x + b))^2)
sse
sst <- sum((y - mean(y))^2)
sst
ssr = sst - sse
ssr
1 - (sse / sst)
r <- y - (a*x + b)
plot(x, y)
plot(x, r)
hline(0)
hline(0)
abline(v=0)
abline(h=0)
hist9r
hist9r
hist(r)
c(x=1, y=2)
a<-x(x=1,y=2)
a<-c(x=1,y=2)
row.names(a) <- 'abc'
m$mean[1]
knitr::opts_chunk$set(warning=FALSE, message=FALSE)
#library(caret)
library(dplyr)
library(fma)
library(forecast)
#library(GGally)
library(ggplot2)
#library(Hmisc)
#library(mlbench)
#library(tidyr)
data(pigs)
m <- ses(pigs, h=4)
summary(m)
autoplot(m) +
autolayer(fitted(m), series='Modeled') +
labs(x='Month', y='Slaughtered pigs')
( sigma <- sd(resid(m)) )
mu <- m$mean[1]
mu + c(-1, 1) * 1.96 * sigma
mu + c(-1, 1) * 1.96 * 10308.58
data(books)
autoplot(books, facet=TRUE)
sapply(books, sd, 1)
summary(books)
GGally::ggpairs(books)
ggAcf(books[,1])
ggAcf(books[,2])
m1_paper <- ses(books[,1], h=4)
m1_hard <- ses(books[,2], h=4)
autoplot(m1_hard) +
autolayer(fitted(m1_hard), series='Modeled') +
labs(x='Day', y='Hardback books sold')
autoplot(m1_paper) +
autolayer(fitted(m1_paper), series='Modeled') +
labs(x='Day', y='Paperback books sold')
sqrt(mean(resid(m1_paper)^2))
sqrt(mean(resid(m1_hard)^2))
m2_paper <- holt(books[,1], h=4)
m2_hard <- holt(books[,2], h=4)
autoplot(m2_paper)
autoplot(m2_hard)
sqrt(mean(resid(m2_paper)^2))
sqrt(mean(resid(m2_hard)^2))
( sigma_m1 <- sd(resid(m)) )
mu <- m$mean[1]
mu + c(-1, 1) * 1.96 * sigma
m2_hard$mean[1] + c(-1, 1) * 1.96 * sd(resid(m2_hard))
m2_hard$mean[1] + c(-1, 1) * 1.96 * sd(resid(m2_hard))
m2_soft$mean[1] + c(-1, 1) * 1.96 * sd(resid(m2_soft))
m2_hard$mean[1] + c(-1, 1) * 1.96 * sd(resid(m2_hard))
m2_paper$mean[1] + c(-1, 1) * 1.96 * sd(resid(m2_paper))
retaildata <- readxl::read_excel('~/Downloads/retail.xlsx', skip=1)
myts <- ts(retaildata[,55], frequency=12, start=c(1982, 4))
autoplot(myts)
m3 <- hw(myts, seasonal='multiplicative', h=26)
autoplot(m3)
m4 <- hw(myts, seasonal='multiplicative', h=26, damped=TRUE)
autoplot(m4)
autoplot(m3) +
autoplot(hw(myts, seasonal='multiplicative', h=26, damped=TRUE))
autoplot(myts) +
autolayer(m3, series='HW mult', PI=FALSE) +
autolayer(m4, series='HW mult w/damped', PI=FALSE) +
guides(colour=guide_legend(title="Forecast")) +
theme(legend.position='bottom')
autoplot(myts) +
autolayer(m3, series='HW mult', PI=FALSE) +
autolayer(m4, series='HW mult (dampened)', PI=FALSE) +
guides(colour=guide_legend(title="Forecast")) +
theme(legend.position='bottom')
autoplot(myts) +
autolayer(m3, series='HW mult', PI=FALSE) +
autolayer(m4, series='HW mult (dampened)', PI=FALSE) +
guides(colour=guide_legend(title=element_blank())) +
theme(legend.position='bottom')
m3
m3 <- hw(myts, seasonal='multiplicative', h=26)
m4 <- hw(myts, seasonal='multiplicative', h=26, damped=TRUE)
summary(m3)
summary(m3)
summary(m4)
gghistogram(resid(m3)) + ggtitle('M_3: HW residuals')
gghistogram(resid(m4)) + ggtitle('M_4: HW + dampening residuals')
autplot(resid(m3))
autoplot(resid(m3))
autoplot(resid(m4))
checkresiduals(m3)
checkresiduals(m3)
checkresiduals(m3)
checkresiduals(m3) + ggtitle('M3: HW residuals')
checkresiduals(m4) + ggtitle('M4: HW+dampened residuals')
autoplot(train)
train <- window(myts, end=c(2007,12))
test <- window(myts, start=c(2008, 1))
autoplot(train)
train <- window(myts, end=c(2007,12))
test <- window(myts, start=c(2008, 1))
autoplot(test)
train <- window(myts, end=c(2007,12))
test <- window(myts, start=c(2008, 1), end=c(2010, 12))
m5 <- hw(test, seasonal='multiplicative', h=26)
m6 <- hw(train, seasonal='multiplicative', h=26, damped=TRUE)
accuracy(m5, test)
accuracy(m6, test)
train <- window(myts, end=c(2007,12))
test <- window(myts, start=c(2008, 1), end=c(2010, 12))
m5 <- hw(test, seasonal='multiplicative', h=26)
m6 <- hw(train, seasonal='multiplicative', h=26, damped=TRUE)
accuracy(m5, test)
accuracy(m6, test)
m5 <- hw(test, seasonal='multiplicative')
m6 <- hw(train, seasonal='multiplicative', damped=TRUE)
accuracy(m5, test)
accuracy(m6, test)
train <- window(myts, end=c(2007,12))
test <- window(myts, start=c(2010, 1))
m5 <- hw(test, seasonal='multiplicative')
m6 <- hw(train, seasonal='multiplicative', damped=TRUE)
accuracy(m5, test)
accuracy(m6, test)
m5 <- hw(test, seasonal='multiplicative')
m6 <- hw(test, seasonal='multiplicative', damped=TRUE)
m5 <- hw(train, seasonal='multiplicative')
m6 <- hw(train, seasonal='multiplicative', damped=TRUE)
accuracy(m5, test)
accuracy(m6, test)
accuracy(m5, test, h=4)
m5 <- hw(train, seasonal='multiplicative', h=4)
m6 <- hw(train, seasonal='multiplicative', h=4,damped=TRUE)
accuracy(m5, test)
accuracy(m6, test)
train <- window(myts, end=c(2010,12))
test <- window(myts, start=c(2011, 1))
m5 <- hw(train, seasonal='multiplicative', h=4)
m6 <- hw(train, seasonal='multiplicative', h=4,damped=TRUE)
accuracy(m5, test)
accuracy(m6, test)
m5 <- hw(train, seasonal='multiplicative')
m6 <- hw(train, seasonal='multiplicative',damped=TRUE)
accuracy(m5, test)
accuracy(m6, test)
autoplot(window(myts, end=c(2010, 12))) +
autolayer(m6)
BoxCox.lambda(myts))
BoxCox.lambda(myts)
lambda <- BoxCox.lambda(myts)
bc <- BoxCox(myts, lambda)
autoplot(bc)
m7 <-  stl(bc, t.window=12, s.window="periodic", robust=TRUE)
bc
class9bc
class(bc)
dim(bc)
names(bc)
bc[,1]
stl(bc[,1], t.window=12, s.window="periodic", robust=TRUE)
m7 <- stl(bc[,1], t.window=12, s.window="periodic", robust=TRUE)
m76
m7
summary(m7)
m7$time.series
m7$time.series$seasonal
m7$time.series$trend
m7$time.series[,1]
m7$time.series[,2]
m7$time.series[,3]
( lambda <- BoxCox.lambda(myts) )
bc <- BoxCox(myts, lambda)
decomp <- stl(bc[,1], t.window=12, s.window="periodic", robust=TRUE)
decomp <- stl(bc[,1], t.window=12, s.window='periodic', robust=TRUE)
head(decomp)
head(decomp$time.series)
head(decomp$time.series[1,])
head(decomp$time.series[,1])
myts - decomp$time.series[,1]
autoplot(myts_adj)
myts_adj <- myts - decomp$time.series[,1]
autoplot(myts_adj)
autoplot(decomp)
autoplot(decomp$time.series[,2] + decomp$time.series[,3])
decomp <- stl(bc[,1], t.window=12, s.window='periodic', robust=TRUE)
myts_adj <- decomp$time.series[,2] + decomp$time.series[,3]
autoplot(myts_adj)
m7 <- forecast(myts_adj)
summary(forecast)
summary(m7)
autplot(m7)
autoplot(m7)
autoplot(m7) + ggtitle('sdf')
autoplot(m7) + ggtitle('ETS on Box Cox + seasonally adjusted myts')
sum((resid(m7)^2)^(1 / lambda_star))
sum((resid(m7)^2)^(1 / lambda))
round(sum((resid(m7)^2)^(1 / lambda)),4)
resid(m7)
resid(m7)^2
(resid(m7)^2)^(1 / lambda)
summary(m5)
summary(m3)
x <- summary(m3)
x
x$`Point Forecast`
x@
)
summary(m3)
summary(m4)
summary(m5)
summary(m6)
summary(m7)
exp(log(lambda * bc + 1) / lambda)
sum(((exp(log(lambda * bc + 1) / lambda))^2)^(1 / lambda))
checkresiduals(m3) + ggtitle('M3: HW residuals')
checkresiduals(m4) + ggtitle('M4: HW+dampened residuals')
checkresiduals(m3)
checkresiduals(m4)
install.packages(mosaic)
install.packages('mosaic')
library(mosaic)
plotFun(8*x + 6*y = 48)
plotFun(8*x + 6*y ~ 48)
plotFun(8*x + 6*y ~ x)
35*5
35*8
10*2 + 35*8
r <- .1
a <- 1
for (i in 1:10) {
a = 1 * -r
print(a)
}
r <- 1 - .1
a <- 1
for (i in 1:10) {
a = 1 * -r
print(a)
}
for (i in 1:10) {
a = 1 * -r
print(a)
}
a <- 1
a = 1 * -r
a = 1 * r
a
a = 1 * r
a
0.9 * .9
a <- 1
for (i in 1:10) {
a = a * r
print(a)
}
a <- 1
for (i in 1:12) {
a = a * r
print(a)
}
a <- 1
for (i in 1:20) {
a = a * r
print(a)
}
a <- 1
for (i in 1:12) {
a = a * r
print(a)
}
12^.9
y <- c(1, 0.9, 0.81, 0.729, 0.6561, 0.59049, 0.531441, 0.4782969, 0.4304672, 0.3874205, 0.3486784, 0.3138106)
x <- 1:12
plot(x, y)
scatter.smooth(x, y)
library(ggplot2)
scatter.plot(x, y, ylim=c(0, 1))
scatscatter.smooth(x, y, ylim=c(0, 1))
scatter.smooth(x, y, ylim=c(0, 1))
scatter.smooth(x, y, ylim=c(0, 1),
main='After 12 months, only 32% of subs remain!')
scatter.smooth(x, y, ylim=c(0, 1),
main='After 12 months, only\n 32% of subs remain!')
scatter.smooth(x, y, ylim=c(0, 1),
main='After 12 months, only\n 32% of subs remain!',
ylab='% of subs remaining',
ylab='Months')
scatter.smooth(x, y, ylim=c(0, 1),
main='After 12 months, only\n 32% of subs remain!',
ylab='% of subs remaining',
xlab='Months')x
scatter.smooth(x, y, ylim=c(0, 1),
main='After 12 months, only\n 32% of subs remain!',
ylab='% of subs remaining',
xlab='Months')
plot(x, y,ylim=c(0, 1),
main='After 12 months, only\n 32% of subs remain!',
ylab='% of subs remaining',
xlab='Months')
lines(loess.smooth(x,y), col="red", lty=2, lwd=2)
plot(x, y,ylim=c(0, 1),
main='After 12 months, only\n 32% of subs remain!',
ylab='% of subs remaining',
xlab='Months')
lines(loess.smooth(x,y), col="red",  lwd=2)
plot(x, y,ylim=c(0, 1),
main=plot(x, y,ylim=c(0, 1),
main='After 12 months, only\n 32% of subs remain!',
ylab='% of subs remaining',
xlab='Months')
lines(loess.smooth(x,y), col="red",  lwd=1)'After 12 months, only\n 32% of subs remain!',
ylab='% of subs remaining',
xlab='Months')
lines(loess.smooth(x,y), col="red",  lwd=2)
plot(x, y,ylim=c(0, 1),
main='After 12 months, only\n 32% of subs remain!',
ylab='% of subs remaining',
xlab='Months')
lines(loess.smooth(x,y), col="red",  lwd=1)
setwd("~/Dropbox/Documents/school/grad/620/web_analytics/project2")
df <- read.csv('rec-amz-Office-Products.edges', stringsAsFactors=FALSE)
View(df)
df <- read.csv('rec-amz-Office-Products.edges', stringsAsFactors=FALSE, header=FALSE)
colnames(df) <- c('user_id', 'product_id', 'rating' ,'timestamp')
View(df)
library(dplyr)
x <- df %>% group_by(user_id, product_id) %>% summarise(n=n()) %>% arrange(desc(n))
View(x)
